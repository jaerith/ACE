ALTER TABLE ACE_CHANGE
 DROP PRIMARY KEY CASCADE;
DROP TABLE ACE_CHANGE CASCADE CONSTRAINTS;

CREATE TABLE ACE_CHANGE
(
  CHANGE_ID       NUMBER(10)                    NOT NULL,
  PROCESS_ID      NUMBER(5)                     NOT NULL,
  START_DTIME     DATE,
  END_DTIME       DATE,
  TOTAL_RECORDS   NUMBER(7),
  ADD_DTIME       DATE                          DEFAULT SYSDATE,
  UPD_DTIME       DATE                          DEFAULT SYSDATE,
  LAST_ANCHOR     VARCHAR2(512 BYTE),
  STATUS          CHAR(1 BYTE)                  DEFAULT 'P',
  STATUS_MESSAGE  VARCHAR2(4000 BYTE)
)
TABLESPACE DATA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;

CREATE UNIQUE INDEX PKACE_CHANGE ON ACE_CHANGE
(CHANGE_ID)
LOGGING
TABLESPACE INDEX
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
NOPARALLEL;

CREATE OR REPLACE TRIGGER ACE_CHANGE_BI
BEFORE INSERT
ON ACE_CHANGE 
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
DECLARE
tmpVar NUMBER;
BEGIN
    if :new.change_id is null then
        select ACE_CHANGE_SEQ.nextval into :new.change_id from dual;
    end if;
END ACE_CHANGE_BI;
/

DROP PUBLIC SYNONYM ACE_CHANGE;

CREATE PUBLIC SYNONYM ACE_CHANGE FOR ACE_CHANGE;

ALTER TABLE ACE_CHANGE ADD (
  PRIMARY KEY
 (CHANGE_ID));